1
00:00:00,030 --> 00:00:05,340


2
00:00:12,720 --> 00:00:17,790
PingCAP University的同学大家好，今天要讲的是TiDB使用管理手册

3
00:00:21,720 --> 00:00:25,440
我是PingCAP这边用户生态事业部的

4
00:00:25,650 --> 00:00:27,180
技术支持工程师陶政

5
00:00:29,640 --> 00:00:32,610
今天的课程主要是面向零基础学员

6
00:00:33,330 --> 00:00:37,110
有几个关键性知识点，常见的使用管理

7
00:00:37,470 --> 00:00:38,250
SQL

8
00:00:38,970 --> 00:00:40,680
对象管理与维护

9
00:00:41,430 --> 00:00:42,930
TiDB 日志管理

10
00:00:43,290 --> 00:00:44,940
TiDB 使用实践

11
00:00:45,450 --> 00:00:48,420
学习目标是了解TiDB使用管理方法

12
00:00:51,600 --> 00:00:54,480
现在是第一部分,常见的使用管理

13
00:00:55,260 --> 00:00:58,230
第一部分包含用户及权限管理

14
00:00:58,800 --> 00:01:00,330
表与系统视图

15
00:01:00,930 --> 00:01:02,100
连接管理

16
00:01:02,670 --> 00:01:04,590
常见的管理控制命令(DCL)

17
00:01:09,300 --> 00:01:09,900


18
00:01:14,610 --> 00:01:15,210


19
00:01:19,350 --> 00:01:21,960
OK,我们现在说用户及权限管理

20
00:01:22,530 --> 00:01:24,360
用户及权限管理的话

21
00:01:24,420 --> 00:01:27,450
是分为添加用户,删除用户

22
00:01:28,320 --> 00:01:29,970
和保留用户的账户

23
00:01:31,440 --> 00:01:35,610
和MySQL一样，TiDB是通过标准的用户管理语句

24
00:01:36,270 --> 00:01:38,850
来创建及授予权限，比如

25
00:01:38,940 --> 00:01:40,050
CREATE USER(创建用户语句)

26
00:01:40,380 --> 00:01:41,340
和GRANT(授予权限语句)

27
00:01:42,900 --> 00:01:48,210
或者,我们可以直接通过使用INSERT、UPDATE和DELETE的操作

28
00:01:49,890 --> 00:01:51,420
来进行表达授权

29
00:01:52,500 --> 00:01:54,600
我这边推荐的是使用

30
00:01:54,630 --> 00:01:58,020
标准的用户管理的SQL语句来进行

31
00:01:58,710 --> 00:02:01,080
创建用户和授予权限的操作

32
00:02:01,170 --> 00:02:02,070
不要

33
00:02:02,550 --> 00:02:03,870
或者不推荐

34
00:02:04,200 --> 00:02:05,370
使用

35
00:02:05,790 --> 00:02:09,300
INSERT、UPDATE操作表的方式来进行授权

36
00:02:10,950 --> 00:02:13,830
TiDB删除用户的方式和MySQL相同

37
00:02:13,860 --> 00:02:16,500
是使用 DROP USER 语句来删除用户

38
00:02:17,730 --> 00:02:20,430
TiDB在数据库初始化的时候

39
00:02:20,550 --> 00:02:21,810
会生成一个

40
00:02:22,830 --> 00:02:24,900
全网段的root默认账户

41
00:02:24,960 --> 00:02:26,490
这个账户是没有密码的

42
00:02:27,240 --> 00:02:31,110
如果有安全控制比较高的需求的话，需要修改这个密码

43
00:02:31,560 --> 00:02:33,210
修改密码的方式

44
00:02:34,620 --> 00:02:37,320
和MySQL一致,是SET PASSWORD

45
00:02:37,590 --> 00:02:38,940
FOR 'root'这个操作

46
00:02:40,350 --> 00:02:44,220
TiDB将密码存在mysql.user的系统数据库里面

47
00:02:44,490 --> 00:02:45,570
只有拥有

48
00:02:45,690 --> 00:02:48,840
CREATE USER权限或者mysql数据库权限的

49
00:02:48,990 --> 00:02:51,570
账户才能够设置或者修改密码

50
00:02:55,050 --> 00:02:56,520
下面是三个

51
00:02:57,510 --> 00:03:00,210
设置创建用户的方式

52
00:03:00,630 --> 00:03:02,310
第一种是CREATE USER

53
00:03:02,910 --> 00:03:06,240
这个是MySQL 5.7默认使用的一种方式

54
00:03:07,410 --> 00:03:09,750
下面两个是修改密码的方式

55
00:03:09,930 --> 00:03:12,900
第一个是常规的SET PASSWORD FOR

56
00:03:13,350 --> 00:03:14,940
第二个是ALTER USER

57
00:03:15,390 --> 00:03:16,500
然后设置密码

58
00:03:17,220 --> 00:03:20,070
这个是跟MySQL 5.7完全兼容的两个方式

59
00:03:20,190 --> 00:03:23,490
包括权限的表现也是跟MySQL 5.7一致的

60
00:03:26,400 --> 00:03:28,530
当我们忘记root密码的时候

61
00:03:28,890 --> 00:03:30,570
TiDB在数据库

62
00:03:30,720 --> 00:03:33,510
初始化的时候，虽然会生成一个root的

63
00:03:33,515 --> 00:03:34,440
默认账户

64
00:03:34,830 --> 00:03:36,660
但是这个账户在

65
00:03:36,665 --> 00:03:39,090
可能在一些修改密码的场景下

66
00:03:39,660 --> 00:03:40,890
大家会忘记密码

67
00:03:41,010 --> 00:03:42,030
这个时候

68
00:03:42,330 --> 00:03:43,650
在TiDB

69
00:03:44,010 --> 00:03:44,940
Server上

70
00:03:44,970 --> 00:03:47,670
有一个标签是security标签

71
00:03:48,150 --> 00:03:51,360
加上下面的这个skip-grant-table的一个参数

72
00:03:51,420 --> 00:03:52,620
我们就可以

73
00:03:52,710 --> 00:03:54,840
跳过权限权限系统来启动TiDB

74
00:03:55,380 --> 00:03:58,440
这边特别强调，这个参数是Server级别的

75
00:03:58,650 --> 00:04:03,360
就是我们在忘记密码的时候，可以挑选一个TiDB Server来进行的操作

76
00:04:03,870 --> 00:04:05,970
当我们修改完这个参数之后

77
00:04:06,150 --> 00:04:09,420
再用第二步的修改后的配置来使用TiDB

78
00:04:09,720 --> 00:04:12,870
这个时候这个TiDB是不会进行权限校验的

79
00:04:13,200 --> 00:04:17,550
我们就可以通过一个无密的root账户进入到TiDB系统当中

80
00:04:18,180 --> 00:04:19,170
这个时候

81
00:04:19,620 --> 00:04:21,360
我们最好是在修改完

82
00:04:21,390 --> 00:04:22,770
TiDB的root密码

83
00:04:23,520 --> 00:04:25,140
再把这个TiDB

84
00:04:26,310 --> 00:04:31,620
关闭以后,把这个参数关闭，再正确地启动TiDB。

85
00:04:37,980 --> 00:04:39,330
这个时候我们就可以用密码来连接到TiDB

86
00:04:42,900 --> 00:04:46,650
表与系统视图。与MySQL一样，我们的TiDB 系统库中

87
00:04:46,830 --> 00:04:48,630
有非常多的权限系统表

88
00:04:49,440 --> 00:04:53,760
这些系统表里面包含了用户账户以及相应的授权信息

89
00:04:54,660 --> 00:04:57,660
user表是直接的用户账户信息

90
00:04:58,170 --> 00:05:01,650
包括全局权限以及其他的一些非权限的列

91
00:05:02,970 --> 00:05:05,700
db表是数据库级别的权限

92
00:05:06,300 --> 00:05:07,650
tables_priv表

93
00:05:07,950 --> 00:05:09,420
是表级的权限

94
00:05:09,480 --> 00:05:11,340
columns_priv表的是列级的权限

95
00:05:11,820 --> 00:05:15,990
那么我们具体可以查看账号拥有哪些权限

96
00:05:18,150 --> 00:05:19,200
同时，

97
00:05:19,350 --> 00:05:22,620
系统库中拥有统计信息相关的系统表

98
00:05:23,280 --> 00:05:25,170
包含统计信息桶的表

99
00:05:25,500 --> 00:05:27,540
统计信息的直方图的表

100
00:05:28,080 --> 00:05:31,410
表的元信息表，比如总行数和修改数

101
00:05:33,600 --> 00:05:35,670
还有GC Worker相关系统表

102
00:05:36,030 --> 00:05:38,190
比如gc_delete_range表

103
00:05:38,280 --> 00:05:41,040
就可以可以查看当前GC Worker的一些状态

104
00:05:43,320 --> 00:05:45,900
系统库中还有其他的一些系统表

105
00:05:46,380 --> 00:05:48,570
有一个全局系统的变量表

106
00:05:48,690 --> 00:05:51,030
这个和MySQL中的SHOW VARIABLES

107
00:05:51,600 --> 00:05:52,800
是相同的东西

108
00:05:54,810 --> 00:05:56,490
这边特别强调一下

109
00:05:57,090 --> 00:06:01,050
GLOBAL_VARIABLES系统表中有一些innodb相关的信息

110
00:06:01,170 --> 00:06:02,640
这个是TiDB

111
00:06:02,790 --> 00:06:03,480
对

112
00:06:03,570 --> 00:06:05,040
MySQL做的一些兼容

113
00:06:06,150 --> 00:06:10,560
其中的一些数字都是一些fake信息，只是为了做兼容使用

114
00:06:11,010 --> 00:06:13,230
修改,并不会有实际的作用

115
00:06:13,620 --> 00:06:17,250
TiDB的参数主要是TiDB开头的一些

116
00:06:18,570 --> 00:06:19,440
字段值

117
00:06:21,390 --> 00:06:24,510
其中，系统表中还有一些TiDB用于在

118
00:06:24,810 --> 00:06:27,420
TiDB初始化的时候记录版本信息的表

119
00:06:30,180 --> 00:06:31,890
下面我们讲连接管理

120
00:06:32,460 --> 00:06:35,670
连接管理，其中最重要的命令就是show processlist

121
00:06:36,660 --> 00:06:41,940
TiDB的 show processlist 与 MySQL 的 show processlist 的显示内容基本一样

122
00:06:42,510 --> 00:06:44,310
不会显示系统进程号

123
00:06:45,690 --> 00:06:51,000
Rid表示当前的session_id因为TiDB是一个分布式的系统

124
00:06:51,270 --> 00:06:56,220
所以相对于MySQL来讲,TiDB多了一个Server级别的参数

125
00:06:56,550 --> 00:06:57,990
就是我们有一个

126
00:06:58,080 --> 00:06:59,190
Global级别

127
00:06:59,280 --> 00:07:00,240
Server级别

128
00:07:00,330 --> 00:07:01,500
和Session级别

129
00:07:01,860 --> 00:07:03,630
三个场景

130
00:07:03,840 --> 00:07:07,650
Global级别的参数调整是所有的TiDB都会生效

131
00:07:08,160 --> 00:07:11,910
Session级别的话,是仅此TiDB会生效

132
00:07:12,720 --> 00:07:13,560
还有

133
00:07:14,310 --> 00:07:15,660
Server级别的话

134
00:07:15,840 --> 00:07:18,660
是这个TiDB上面所有的

135
00:07:18,750 --> 00:07:20,340
Session都会生效

136
00:07:23,850 --> 00:07:28,200
在我们kill DML语句的时候，首先使用show processlist

137
00:07:28,680 --> 00:07:30,300
找到对应的session id

138
00:07:30,900 --> 00:07:35,010
然后再执行kill tidb [session id]

139
00:07:35,580 --> 00:07:38,850
这个是TiDB对MySQL命令的一个扩展

140
00:07:39,240 --> 00:07:42,690
我们需要在kill和session id中间加上tidb

141
00:07:42,900 --> 00:07:43,620
的字符串

142
00:07:44,130 --> 00:07:45,420
来执行这个命令

143
00:07:46,920 --> 00:07:48,480
然后是admin命令

144
00:07:48,750 --> 00:07:52,470
这边的admin命令可以看到,有的admin show ddl jobs

145
00:07:53,220 --> 00:07:56,700
这个可以看到，当前在执行的DDL语句

146
00:07:57,030 --> 00:08:01,650
在TiDB中，DDL一旦开始执行，便会在放在后台进行操作

147
00:08:02,190 --> 00:08:03,960
这个时候我们要查看的话

148
00:08:04,410 --> 00:08:06,600
需要用admin show ddl jobs

149
00:08:07,500 --> 00:08:09,810
不管你前台是使用了

150
00:08:09,815 --> 00:08:12,090
ctrl+c或者直接关闭了

151
00:08:12,240 --> 00:08:13,050
终端

152
00:08:13,320 --> 00:08:15,600
这个DDL都会在后台执行

153
00:08:15,870 --> 00:08:19,680
所以说，当我们查找到需要kill的DDL job ID之后

154
00:08:19,950 --> 00:08:22,710
我们需要使用admin cancel ddl jobs 'job_id'

155
00:08:22,980 --> 00:08:24,810
来取消这个DDL操作

156
00:08:28,770 --> 00:08:30,300
下面讲常见的

157
00:08:30,420 --> 00:08:31,770
管理控制命令

158
00:08:33,030 --> 00:08:35,550
我们最常见的管理控制命令就是事务

159
00:08:36,270 --> 00:08:40,890
TiDB这边事务的使用方式和MySQL是完全一致的

160
00:08:41,430 --> 00:08:45,990
在开启事务的时候是用START TRANSACTION和BEGIN来进行声明

161
00:08:46,740 --> 00:08:48,750
事务提交用COMMIT声明

162
00:08:48,840 --> 00:08:50,940
事务回滚用ROLLBACK声明

163
00:08:52,740 --> 00:08:57,630
TiDB中事务的隔离级别是只支持SNAPSHOT的隔离

164
00:08:58,170 --> 00:08:59,310
就是快照隔离

165
00:09:00,150 --> 00:09:03,870
这个隔离方式等同于MySQL的RR级别的隔离

166
00:09:05,040 --> 00:09:08,550
在TiDB的事务中,单条KV entry不能超过6M

167
00:09:09,480 --> 00:09:12,270
KV entry的总条数不能超过30万

168
00:09:12,450 --> 00:09:13,650
KV entry总大小

169
00:09:13,655 --> 00:09:15,030
不超过100MB

170
00:09:15,570 --> 00:09:19,410
这边要特别强调,KV的总条数不超过30万

171
00:09:19,620 --> 00:09:20,520
不是指

172
00:09:20,525 --> 00:09:23,640
一次事务当中,能操作的行数是30万

173
00:09:23,820 --> 00:09:27,000
而是指它操作的KV数量是30万

174
00:09:27,840 --> 00:09:28,650
举例

175
00:09:28,770 --> 00:09:29,820
如果我们

176
00:09:29,880 --> 00:09:33,060
一个TiKV中，有10条索引

177
00:09:33,870 --> 00:09:36,210
加上主键索引也有10条的话

178
00:09:36,570 --> 00:09:40,920
那我们一次能操作的行数，理论上只有三万

179
00:09:41,130 --> 00:09:43,050
因为3×10个KV对

180
00:09:43,170 --> 00:09:45,960
就是30万个KV总条数

181
00:09:49,230 --> 00:09:54,540
为了兼容上面的操作，TiDB提供了两个参数，一个是tidb_batch_insert

182
00:09:55,080 --> 00:09:57,000
一个是tidb_batch_delete

183
00:09:57,570 --> 00:10:01,290
这两个参数在牺牲了一致性的情况下,可以保证

184
00:10:01,320 --> 00:10:02,280
我们可以

185
00:10:02,550 --> 00:10:05,460
在KV总条数超过30万的情况下

186
00:10:05,610 --> 00:10:06,870
也写入数据

187
00:10:07,230 --> 00:10:10,380
但是这个时候是牺牲了整个的事务一致性的

188
00:10:10,830 --> 00:10:12,300
就是我们在

189
00:10:12,330 --> 00:10:15,540
业务中断的时候，前面已经提交的成功事务

190
00:10:15,570 --> 00:10:16,500
不会回滚

191
00:10:16,860 --> 00:10:20,460
就是在批量写入的时候，可能会有一些数据是成功

192
00:10:20,580 --> 00:10:22,020
会有一些数据是失败

193
00:10:22,800 --> 00:10:25,320
这边使用的时候要特别注意影响

194
00:10:25,920 --> 00:10:28,170
而且,这两个参数在后期

195
00:10:28,290 --> 00:10:31,020
TiDB有可能不进行支持

196
00:10:34,560 --> 00:10:36,030
第二部分:SQL

197
00:10:36,780 --> 00:10:39,510
SQL部分我们需要掌握的是Query处理

198
00:10:39,960 --> 00:10:41,370
DML处理

199
00:10:41,640 --> 00:10:43,830
而支持DDL的类型

200
00:10:45,210 --> 00:10:46,200
Query处理

201
00:10:46,470 --> 00:10:48,900
在成功部署TiDB集群以后

202
00:10:49,080 --> 00:10:51,930
就可以在TiDB中执行SQL语句了

203
00:10:53,040 --> 00:10:56,130
TiDB是对外暴露一个4000端口

204
00:10:56,135 --> 00:10:57,060
默认的

205
00:10:57,570 --> 00:10:59,550
这边是兼容MySQL协议的

206
00:10:59,970 --> 00:11:03,840
所以说你可以使用MySQL的客户端来连接TiDB

207
00:11:04,050 --> 00:11:06,690
并且可以直接执行MySQL的语句

208
00:11:07,320 --> 00:11:09,270
这边支持MySQL客户端

209
00:11:09,390 --> 00:11:10,800
包括但不限于

210
00:11:11,310 --> 00:11:12,600
MySQL Client

211
00:11:13,440 --> 00:11:15,180
是命令行的客户端

212
00:11:15,840 --> 00:11:17,670
Navicat/HeidiSQL

213
00:11:18,960 --> 00:11:22,740
这个是图形化操作系统上面的一些客户端

214
00:11:23,220 --> 00:11:24,540
然后JDBC

215
00:11:24,840 --> 00:11:28,770
Python DB-API这个是代码侧的一些连接驱动

216
00:11:28,980 --> 00:11:29,640
等等

217
00:11:32,310 --> 00:11:33,600
DML处理

218
00:11:34,620 --> 00:11:39,900
DML数据操作语言是用于帮助用户来实现对数据库的基本操作

219
00:11:40,170 --> 00:11:41,880
比如查询、写入

220
00:11:42,030 --> 00:11:44,520
删除和修改数据库中的数据

221
00:11:46,140 --> 00:11:49,020
TiDB这边支持的数据操作语言包括

222
00:11:49,560 --> 00:11:51,450
但不限于Select

223
00:11:51,660 --> 00:11:53,130
Insert、Delete

224
00:11:53,370 --> 00:11:55,410
Update

225
00:11:59,070 --> 00:12:00,120
Replace

226
00:12:00,180 --> 00:12:03,630
这边详细的处理操作语言，我们不做详细展开

227
00:12:03,750 --> 00:12:05,700
整体表现是与MySQL

228
00:12:05,730 --> 00:12:06,420
一致

229
00:12:06,930 --> 00:12:09,060
当中,有一些略微的不兼容

230
00:12:12,120 --> 00:12:16,110
具体的不兼容，我们可以到官方文档,来查看一些具体的信息

231
00:12:17,670 --> 00:12:19,350
支持的DDL类型

232
00:12:21,270 --> 00:12:22,560
不支持的特性

233
00:12:23,490 --> 00:12:26,340
我们可以这边看一下，这边不支持的特性

234
00:12:27,720 --> 00:12:28,740
存储过程

235
00:12:29,040 --> 00:12:29,910
视图

236
00:12:30,150 --> 00:12:31,170
触发器

237
00:12:31,650 --> 00:12:32,430
事件

238
00:12:32,730 --> 00:12:33,930
自定义函数

239
00:12:34,470 --> 00:12:35,640
外键约束

240
00:12:35,645 --> 00:12:37,380
全文函数与索引

241
00:12:37,650 --> 00:12:41,310
空间函数与索引,非utf8字符集

242
00:12:42,030 --> 00:12:44,250
BINARY之外的排序规则

243
00:12:45,150 --> 00:12:47,940
增加主键和删除主键

244
00:12:48,840 --> 00:12:51,480
不支持MySQL 5.7的SYS Schema

245
00:12:51,900 --> 00:12:52,740
和

246
00:12:53,310 --> 00:12:55,110
MySQL的追踪优化器

247
00:12:55,740 --> 00:12:57,240
XML函数

248
00:12:58,350 --> 00:12:59,670
X Protocol

249
00:12:59,675 --> 00:13:00,870
Savepoints

250
00:13:01,080 --> 00:13:02,280
列级权限

251
00:13:03,330 --> 00:13:06,930
CREATE TABLE tblName AS SELECT statment语法

252
00:13:08,010 --> 00:13:09,270
临时表语法

253
00:13:10,260 --> 00:13:11,970
两阶段XA语法

254
00:13:13,380 --> 00:13:14,280
锁

255
00:13:14,370 --> 00:13:16,320
LOCK TABLE的锁语法

256
00:13:16,740 --> 00:13:20,460
这个的话，需要强调一下，TiDB这边的LOCK TABLE

257
00:13:20,700 --> 00:13:23,490
其实是对MySQL做的一个兼容

258
00:13:23,940 --> 00:13:27,420
这边TiDB由于自身的特性，并不需要LOCK TABLE的语法

259
00:13:27,630 --> 00:13:30,120
所以我们当执行的LOCK TABLE时候是没有效果的

260
00:13:31,050 --> 00:13:34,050
还有CHECK TABLE的语法和的CHECKSUM TABLE语法

261
00:13:34,650 --> 00:13:36,720
以上都是不支持的特性

262
00:13:41,430 --> 00:13:42,030
...

263
00:13:45,450 --> 00:13:46,620
第三部分

264
00:13:46,625 --> 00:13:48,060
对象的管理与维护

265
00:13:48,660 --> 00:13:51,300
这边需要掌握的是,常见的表类型

266
00:13:51,870 --> 00:13:53,280
支持的数据类型

267
00:13:53,310 --> 00:13:54,420
Json的使用

268
00:13:54,900 --> 00:13:56,190
分区表的使用

269
00:13:57,270 --> 00:13:59,730
常见的表管理命令

270
00:13:59,970 --> 00:14:00,690
索引

271
00:14:00,695 --> 00:14:02,670
表、索引健康度及统计信息

272
00:14:05,130 --> 00:14:06,510
常见的表类型

273
00:14:07,350 --> 00:14:11,830
TiDB仅支持utf8(mb4字符集)

274
00:14:11,835 --> 00:14:12,000
...

275
00:14:13,260 --> 00:14:15,150
向下兼容utf8

276
00:14:16,680 --> 00:14:18,840
这边兼容uft8是为了

277
00:14:18,870 --> 00:14:21,390
兼容MySQL的utf8的情况

278
00:14:21,660 --> 00:14:24,630
TiDB默认是使用uf8(mb4)字符集

279
00:14:26,430 --> 00:14:28,470
并不支持其他的,诸如

280
00:14:28,620 --> 00:14:29,490
latin

281
00:14:30,030 --> 00:14:31,200
等等的字符集

282
00:14:32,670 --> 00:14:35,010
TiDB的存储引擎为TiKV

283
00:14:35,340 --> 00:14:39,780
表中显示的innodb,包括系统参数中显示的innodb

284
00:14:39,900 --> 00:14:41,730
是兼容性地显示使用

285
00:14:41,940 --> 00:14:43,440
并不是真实的一个 InnoDB

286
00:14:44,460 --> 00:14:46,080
TiDB支持分区表

287
00:14:47,220 --> 00:14:49,710
TiDB支持SHARD ROW ID的

288
00:14:50,430 --> 00:14:51,780
预热点打散表

289
00:14:52,410 --> 00:14:55,710
TiDB单表最多支持512个列

290
00:14:58,650 --> 00:15:00,270
支持的数据类型

291
00:15:01,410 --> 00:15:03,330
TiDB支持数据类型有

292
00:15:03,450 --> 00:15:04,560
数值类型

293
00:15:05,520 --> 00:15:07,290
日期和时间类型

294
00:15:08,070 --> 00:15:09,180
字符串类型

295
00:15:09,900 --> 00:15:10,950
JSON类型

296
00:15:11,610 --> 00:15:12,750
枚举类型

297
00:15:12,870 --> 00:15:14,130
和集合类型

298
00:15:15,780 --> 00:15:18,030
数值类型就是我们常见的int、

299
00:15:18,120 --> 00:15:19,050
bigint、

300
00:15:19,500 --> 00:15:20,340
double

301
00:15:20,370 --> 00:15:21,330
等等类型

302
00:15:21,900 --> 00:15:23,820
日期的有: Date、

303
00:15:24,060 --> 00:15:26,760
Datetime 、Timestamp 等等类型等等类型

304
00:15:27,930 --> 00:15:29,130
字符串有

305
00:15:29,280 --> 00:15:30,180
varchar

306
00:15:30,360 --> 00:15:31,110
char

307
00:15:31,620 --> 00:15:33,570
等字符串类型

308
00:15:38,280 --> 00:15:38,880
...

309
00:15:39,480 --> 00:15:40,710
JSON的使用

310
00:15:40,980 --> 00:15:45,150
TiDB支持MySQL 5.7 GA版本发布的大多数Json函数

311
00:15:46,140 --> 00:15:47,010
包含

312
00:15:47,015 --> 00:15:49,470
创建、搜索、修改

313
00:15:49,740 --> 00:15:51,060
返回值属性

314
00:15:53,460 --> 00:15:56,580
TiDB有如下,未支持的Json函数

315
00:16:00,450 --> 00:16:03,870
同时，TiDB不支持Json的虚拟列索引

316
00:16:04,800 --> 00:16:06,420
所以,这边需要强调的是

317
00:16:07,470 --> 00:16:11,220
当我们需要在Json列上添加索引的时候

318
00:16:11,430 --> 00:16:15,420
TiDB这边并不支持在Json虚拟列上加索引

319
00:16:16,500 --> 00:16:18,120
所以，当我们需要

320
00:16:18,360 --> 00:16:20,760
该操作来优化查询的时候

321
00:16:21,150 --> 00:16:23,670
TiDB不能达到预期的效果

322
00:16:26,850 --> 00:16:28,020
分区表的使用

323
00:16:28,500 --> 00:16:29,940
TiDB有一个

324
00:16:30,150 --> 00:16:32,220
系统参数是

325
00:16:32,310 --> 00:16:33,840
...

326
00:16:33,900 --> 00:16:35,070
tidb_enable_table_partition

327
00:16:36,000 --> 00:16:39,690
这个变量用来设置是否开启TABLE PARTITION特性

328
00:16:40,560 --> 00:16:42,750
目前分区表支持range分区

329
00:16:43,320 --> 00:16:46,110
及,按照数据的区间范围分区

330
00:16:46,380 --> 00:16:47,760
和hash分区

331
00:16:49,620 --> 00:16:54,300
tidb_enable_table_partition在3.0版本之后是默认开启的

332
00:16:55,380 --> 00:17:00,090
当我们从2.1升级到3.0之后，需要显式的声明

333
00:17:00,150 --> 00:17:02,550
将这个参数设置为Enable

334
00:17:04,980 --> 00:17:08,040
才可以开启TiDB的分区表特性

335
00:17:10,830 --> 00:17:12,630
常见表管理命令

336
00:17:13,380 --> 00:17:15,930
常见表管理命令有如下

337
00:17:16,140 --> 00:17:17,430
show tables

338
00:17:17,760 --> 00:17:20,250
analyze table 和 admin 语句

339
00:17:20,970 --> 00:17:26,280
show tables 和MySQL表现一致，我们可以看到该数据库下所有的数据表。

340
00:17:27,390 --> 00:17:31,110
analyze table是TiDB收集表统计信息命令。

341
00:17:32,070 --> 00:17:34,200
admin语句前面有提到过

342
00:17:34,530 --> 00:17:35,880
DDL 的相关内容，

343
00:17:36,150 --> 00:17:39,120
这边也可以看一些诸如: 慢查询

344
00:17:39,180 --> 00:17:40,650
等等的一些内容。

345
00:17:43,320 --> 00:17:44,160
所以，

346
00:17:44,790 --> 00:17:47,940
B Tree,B+ Tree和LSM Tree

347
00:17:48,570 --> 00:17:51,330
B树的话是一颗m阶B树

348
00:17:52,350 --> 00:17:55,020
是一颗平衡的m路搜索树

349
00:17:55,890 --> 00:17:58,170
B+树是一种数据结构

350
00:17:58,470 --> 00:18:01,080
通常用于数据库和操作系统的文件系统中

351
00:18:01,680 --> 00:18:04,500
B+树的特点是能够保持数据稳定有序

352
00:18:04,800 --> 00:18:08,400
其插入与修改，拥有较稳定的对数时间复杂度

353
00:18:09,360 --> 00:18:11,850
B+树元素自底向上插入

354
00:18:12,390 --> 00:18:14,190
二叉数恰好相反，

355
00:18:15,150 --> 00:18:19,590
LSM 树是日志和传统的单文件索引的中立

356
00:18:19,770 --> 00:18:23,220
他提供一个机制来管理更小的独立的索引文件

357
00:18:23,490 --> 00:18:26,010
在TiDB的TiKV

358
00:18:26,400 --> 00:18:30,420
存储层使用是LSM树数来存储具体数据

359
00:18:30,810 --> 00:18:32,310
但是在我们进行

360
00:18:33,000 --> 00:18:37,470
数据表调优，索引添加等情况时我们可以按照B树的

361
00:18:37,890 --> 00:18:39,060
方法来思考

362
00:18:39,630 --> 00:18:41,250
来进行相应的优化

363
00:18:43,710 --> 00:18:46,830
表、索引健康度及统计信息

364
00:18:48,360 --> 00:18:49,860
统计信息的收集

365
00:18:51,210 --> 00:18:55,110
我们可以采用Analyze table的语法来手动收集统计信息

366
00:18:55,800 --> 00:18:57,090
同时

367
00:18:57,095 --> 00:18:58,800
TiDB会自动更新

368
00:18:58,890 --> 00:18:59,910
统计信息

369
00:19:00,360 --> 00:19:01,380
相关的

370
00:19:01,620 --> 00:19:04,590
GLOBAL_VARIABLES的系统变量中有三个

371
00:19:05,400 --> 00:19:07,290
第一个是

372
00:19:07,440 --> 00:19:09,450
当表中有多少数据变更之后

373
00:19:09,570 --> 00:19:11,490
我们会来收集统计信息

374
00:19:12,690 --> 00:19:14,250
这边需要强调的一点

375
00:19:14,640 --> 00:19:18,210
在TiDB解决的大表的场景当中

376
00:19:18,690 --> 00:19:20,970
可能一个10亿的表中

377
00:19:21,120 --> 00:19:23,040
1000万数据的变更

378
00:19:23,520 --> 00:19:24,570
仅占到了

379
00:19:25,200 --> 00:19:26,340
1%

380
00:19:28,470 --> 00:19:31,020
这边的话，我们需要将TiDB

381
00:19:31,380 --> 00:19:34,530
自动收集的这个阈值调小

382
00:19:34,560 --> 00:19:35,580
来争取

383
00:19:36,150 --> 00:19:39,450
在较小的数据,相对较小的数据

384
00:19:39,840 --> 00:19:40,830
变更之后

385
00:19:41,010 --> 00:19:43,230
能够较快的重新收集统计信息

386
00:19:44,460 --> 00:19:45,930
下面两个参数

387
00:19:46,800 --> 00:19:50,160
统计信息的开始时间和统计信息的结束时间

388
00:19:50,400 --> 00:19:53,550
这边是控制我们收集统计信息的时间

389
00:19:53,880 --> 00:19:57,390
因为统计信息的收集可能会有一些性能上的消耗，

390
00:19:57,690 --> 00:20:01,770
当我们在业务高峰期不希望TiDB进行统计收集的时候，

391
00:20:01,890 --> 00:20:05,160
我们可以将这两个时间范围设置到业务低峰期

392
00:20:07,080 --> 00:20:08,760
控制Analyze并发度

393
00:20:09,330 --> 00:20:12,870
TiDB有下面三个参数来控制Analyze的并发度

394
00:20:13,470 --> 00:20:15,300
一般采用默认值就可以

395
00:20:18,660 --> 00:20:20,400
这边的几个参数

396
00:20:20,670 --> 00:20:22,350
分别作用于

397
00:20:22,500 --> 00:20:23,340
包括

398
00:20:23,580 --> 00:20:25,080
分布式SQL的一些

399
00:20:25,440 --> 00:20:26,250
Scan

400
00:20:26,760 --> 00:20:28,320
索引的一些Scan

401
00:20:28,380 --> 00:20:29,280
等等情况

402
00:20:31,890 --> 00:20:33,450
统计信息的查看

403
00:20:34,860 --> 00:20:37,650
统计信息当中有表的元信息

404
00:20:37,860 --> 00:20:39,180
列的元信息

405
00:20:39,420 --> 00:20:41,430
直方图桶的信息

406
00:20:42,210 --> 00:20:45,180
上面三个信息，我们可以在之前提到的

407
00:20:45,480 --> 00:20:46,410
具体的表中

408
00:20:46,415 --> 00:20:48,270
查到具体的信息

409
00:20:48,870 --> 00:20:53,370
在mysql表

410
00:20:53,520 --> 00:20:55,830
这个是我们对mysql做的一个兼容系统

411
00:20:56,880 --> 00:20:59,190
第四个是统计信息的导入导出

412
00:20:59,670 --> 00:21:01,710
统计信息导入导出比较重要

413
00:21:02,190 --> 00:21:05,280
官方文档有具体的语法来进行统计信息的导入导出

414
00:21:05,880 --> 00:21:08,760
这边统计信息的导入导出有利于我们

415
00:21:09,330 --> 00:21:11,070
保持现场

416
00:21:12,630 --> 00:21:15,210
得到现场的统计信息，我们就可以

417
00:21:15,660 --> 00:21:16,950
得到真实的

418
00:21:17,100 --> 00:21:20,790
执行环境来进行一个SQL执行计划的路线

419
00:21:21,660 --> 00:21:22,680
有利于

420
00:21:22,830 --> 00:21:25,560
现场的回溯或者是协助的排查

421
00:21:28,020 --> 00:21:29,040
第四部分

422
00:21:29,370 --> 00:21:30,990
TiDB日志管理

423
00:21:32,790 --> 00:21:36,360
这边需要掌握的是TiDB系统日志格式解读

424
00:21:37,020 --> 00:21:39,450
TiKV系统日志格式解读

425
00:21:39,720 --> 00:21:41,460
PD系统日志格式解读

426
00:21:42,180 --> 00:21:44,130
Slow log日志格式解读

427
00:21:44,730 --> 00:21:46,860
Slow log分析视图及工具

428
00:21:50,250 --> 00:21:52,920
在我们部署好TiDB之后

429
00:21:55,830 --> 00:21:58,950
我们可以看到，在我们的deploy目录下

430
00:21:59,250 --> 00:22:01,950
TiDB会以tidb.log

431
00:22:02,430 --> 00:22:04,590
存储TiDB的日志

432
00:22:05,160 --> 00:22:07,650
这个日志的第一个字段是时间

433
00:22:07,950 --> 00:22:09,750
第二个阶段是

434
00:22:10,380 --> 00:22:12,390
告警等级即日志等级

435
00:22:13,410 --> 00:22:15,540
然后,后面是具体的日志内容

436
00:22:15,930 --> 00:22:18,420
我们可以看到下图中

437
00:22:18,750 --> 00:22:21,930
前面就有一些TiDB的详细信息

438
00:22:23,280 --> 00:22:24,360
包括一些

439
00:22:29,070 --> 00:22:29,670
...

440
00:22:32,850 --> 00:22:35,310
TiKV系统日志格式解读

441
00:22:35,970 --> 00:22:38,640
同TiDB一样

442
00:22:38,700 --> 00:22:42,480
TiKV的系统是存储在自己的deploy目录下

443
00:22:43,110 --> 00:22:46,860
这边也是以字段来分割，第一个字段是时间

444
00:22:47,160 --> 00:22:49,500
第二个字段是日志等级

445
00:22:49,800 --> 00:22:51,510
后面是具体的日志内容

446
00:22:53,940 --> 00:22:55,890
PD系统日志格式解读

447
00:22:56,070 --> 00:22:59,790
PD系统日志和TiDB、TiKV相同

448
00:22:59,850 --> 00:23:02,970
存储于PD组件的deploy目录下面

449
00:23:03,300 --> 00:23:05,190
同样，第一个字段是时间

450
00:23:05,610 --> 00:23:06,930
第二个字段是

451
00:23:07,410 --> 00:23:08,310
日志等级

452
00:23:12,750 --> 00:23:17,010
这边需要强调的是TiDB、TiKV和PD系统日志

453
00:23:17,190 --> 00:23:20,070
都遵循于自己的rotate的规则

454
00:23:20,160 --> 00:23:21,390
我们可以在

455
00:23:21,570 --> 00:23:22,890
deploy 之前

456
00:23:23,040 --> 00:23:26,370
配置好对应的rotate的规则来滚动这个日志

457
00:23:26,760 --> 00:23:28,560
以防单个日志过大

458
00:23:29,100 --> 00:23:31,230
或者日志不能正确地删除

459
00:23:31,680 --> 00:23:32,760
和保留

460
00:23:35,040 --> 00:23:36,810
Slow log日志格式解读

461
00:23:37,620 --> 00:23:41,190
TiDB在2.1.8以后的版本

462
00:23:41,700 --> 00:23:43,770
对Slow log进行了重构

463
00:23:44,160 --> 00:23:46,980
以兼容Mysql的Slow log格式

464
00:23:47,340 --> 00:23:48,840
我们可以看到下图

465
00:23:49,050 --> 00:23:52,920
TiDB的Slow log是和Mysql的格式完全一致的

466
00:23:55,950 --> 00:23:57,240
以行为单位

467
00:23:57,690 --> 00:23:58,950
以键值

468
00:23:59,430 --> 00:24:02,100
来作为一个信息，我们可以看到时间

469
00:24:02,130 --> 00:24:02,970
事务、用户

470
00:24:03,840 --> 00:24:05,370
和具体的SQL语句

471
00:24:10,860 --> 00:24:14,670
同时，我们在Slow log中,也对MySQL的Slow log

472
00:24:14,850 --> 00:24:16,260
进行一些扩展

473
00:24:16,710 --> 00:24:18,330
包含了一些

474
00:24:18,870 --> 00:24:21,240
TiDB中独有的一些信息.比如

475
00:24:21,750 --> 00:24:23,310
扫过的key的数量

476
00:24:23,520 --> 00:24:24,480
...

477
00:24:24,840 --> 00:24:26,730
同时Slow log是作为

478
00:24:26,790 --> 00:24:29,550
单个文件存放于log目录下面

479
00:24:30,390 --> 00:24:32,850
Slow log是存放于

480
00:24:33,330 --> 00:24:36,780
TiDB Server组件下，我们可以在TiDB Server的

481
00:24:36,810 --> 00:24:37,950
log目录下

482
00:24:38,010 --> 00:24:39,720
同时看到TiDB的log

483
00:24:39,960 --> 00:24:42,120
和单独出来的Slow log

484
00:24:44,100 --> 00:24:46,290
Slow log分析视图及工具

485
00:24:47,040 --> 00:24:48,060
分析视图

486
00:24:48,780 --> 00:24:52,380
由我们上面提到的admin命令，admin可以看到

487
00:24:52,980 --> 00:24:56,190
admin show slow来查看最近的一些

488
00:24:57,450 --> 00:24:58,950
TiDB的Slow log

489
00:24:59,460 --> 00:25:01,800
这个命令打出来的log是

490
00:25:02,190 --> 00:25:05,430
解析我们Slow log那个存储路径

491
00:25:05,910 --> 00:25:06,690
然后

492
00:25:07,080 --> 00:25:09,450
取到最近的一些Slow log

493
00:25:09,600 --> 00:25:12,570
并不是实际存储于KV引擎中的数据

494
00:25:13,620 --> 00:25:16,500
第二个是INFORMATION_SCHEMA.SLOW_QUERY

495
00:25:16,980 --> 00:25:19,590
这个是admin show slow的一个总集

496
00:25:19,710 --> 00:25:24,000
我们可以看到具体的一些slow query其中的一些内容

497
00:25:25,230 --> 00:25:26,040
工具

498
00:25:26,670 --> 00:25:27,720
percona的

499
00:25:28,620 --> 00:25:29,970
由于兼容了

500
00:25:30,060 --> 00:25:32,460
MySQL的Slow log格式

501
00:25:32,760 --> 00:25:34,140
我们可以使用

502
00:25:34,230 --> 00:25:35,880
percona的MySQL

503
00:25:37,020 --> 00:25:38,610
Slow log分析工具

504
00:25:38,940 --> 00:25:41,010
来分析TiDB的慢查询

505
00:25:41,730 --> 00:25:43,200
我们也可以使用

506
00:25:43,205 --> 00:25:47,520
mysqldumpslow分析TiDB慢查询

507
00:25:52,230 --> 00:25:52,830
...

508
00:25:56,880 --> 00:25:59,280
我们本期课程到此结束

509
00:25:59,610 --> 00:26:00,330
谢谢

510
00:26:05,040 --> 00:26:05,640
...

